<?php
/**
 * @file
 * Save & Edit
 * Provides a button that gives users the option to
 * Save a form they are working on, AND return to the
 * editing form in one step.
 *
 * I find this quite usefull when entering a very long
 * blog post, and my thumb hovering dangerously close to
 * the mouse button that will take me "back" and lose all
 * my entered changes/data.
 */

/**
 * Implements hook_config_info().
 */
function save_edit_config_info() {
  $prefixes['save_edit.settings'] = array(
    'label' => t('Save & Edit'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 */
function save_edit_permission() {
  return array(
    'use save and edit' => array(
      'title' => t('Use Save and Edit Button'),
      'description' => t('Display the Save and Edit Button on the specified entity forms.'),
    ),
    'administer save and edit' => array(
      'title' => t('Administer Save and Edit'),
      'description' => t('Change the Save and Edit configurations.'),
    ),
  );
}
/**
 * Implements hook_menu().
 */
function save_edit_menu() {
  $items = array();
  $items['admin/config/content/save-edit'] = array(
    'title' => 'Save & Edit Settings',
    'description' => 'Administer settings related to the Save & Edit module.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('save_edit_admin_settings'),
    'access arguments' => array('administer save and edit'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'save_edit.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function save_edit_form_alter(&$form, $form_state, $form_id) {
  $config = config('save_edit.settings');
  $node_types = $config->get('save_edit_node_types');

  // If the type is not set, it's not a node and we are not interested.
  if (!isset($form['type']['#value'])) {
    return;
  }

  $form_type = $form['type']['#value'];

  if (strstr($form_id, '_node_form') && !empty($node_types[$form_type]) && user_access('use save and edit')) {

    // Add save and edit button.
    $form['actions']['save_edit'] = array(
      '#type' => 'submit',
      '#access' => user_access('use save and edit'),
      '#value' => t($config->get('save_edit_button_value')),
      '#weight' => $config->get('save_edit_button_weight'),
    );
    $form['actions']['save_edit']['#submit'] = $form['actions']['submit']['#submit'];
    // Unset node submit if it's present, we'll handle that in
    // redirect_save_edit_submit().
    foreach ($form['actions']['save_edit']['#submit'] as $key => $value) {
      if ($value == 'node_form_submit') {
        unset($form['actions']['save_edit']['#submit'][$key]);
      }
    }
    $form['actions']['save_edit']['#submit'][] = 'redirect_save_edit_submit';

    // Now if we have chosen to use the auto-unpublish feature, we should
    // create a Publish button to add a clear workflow.
    if (($config->get('save_edit_unpublish') || $config->get('save_edit_unpublish_new_only')) && !$form['#node']->status && !$config->get('save_edit_hide_publish')) {
      $form['actions']['save_edit_publish'] = array(
        '#type' => 'submit',
        '#access' => user_access('use save and edit'),
        '#value' => t($config->get('save_edit_publish_button_value')),
        '#weight' => $config->get('save_edit_publish_button_weight', 7),
      );
      $form['actions']['save_edit_publish']['#submit'] = $form['actions']['submit']['#submit'];
      // Unset node submit if it's present, we'll handle that in
      // redirect_save_edit_submit().
      foreach ($form['actions']['save_edit']['#submit'] as $key => $value) {
        if ($value == 'node_form_submit') {
          unset($form['actions']['save_edit']['#submit'][$key]);
        }
      }
      $form['actions']['save_edit_publish']['#submit'][] = 'redirect_save_edit_submit';
    }

    if ($config->get('save_edit_hide_default_save')) {
      $form['actions']['submit']['#access'] = FALSE;
    }
    if ($config->get('save_edit_hide_default_preview')) {
      $form['actions']['preview']['#access'] = FALSE;
    }
    if ($config->get('save_edit_hide_default_delete')) {

      $form['actions']['delete']['#access'] = FALSE;
    }
    // This allows us to modify the default Save button to something we like
    // more.
    $form['actions']['submit']['#value'] = t($config->get('save_edit_default_save_button_value'));
    $form['actions']['submit']['#weight'] = $config->get('save_edit_default_save_button_weight');
  }
}
/**
 * Custom Submit Handler for Redirecting Save & Edit's to the node form after
 * saving.
 */
function redirect_save_edit_submit($form, &$form_state) {
  $config = config('save_edit.settings');
  // We will first check to see if they want to auto-unpublish, and make
  // modifications if so before submitting the node.
  // ONLY do something on new nodes.
  if ($config->get('save_edit_unpublish_new_only') && !$form_state['values']['nid']) {
    $form_state['values']['status'] = 0;
  }
  // DO IT EVERY TIME Save & Edit is used. (Seems like a rare case).
  elseif ($config->get('save_edit_unpublish') && !$config->get('save_edit_unpublish_new_only')) {
    $form_state['values']['status'] = 0;
  }
  // WAIT... if someone clicked the Publish button, maybe we should retick that
  // option now.
  if ($form_state['clicked_button']['#id'] == 'edit-save-edit-publish') {
    $form_state['values']['status'] = 1;
  }
  // Call default node save/submit function.
  node_form_submit($form, $form_state);
  // Only redirect if using the Save & Edit button.
  if ($form_state['clicked_button']['#id'] == 'edit-save-edit' || $form_state['clicked_button']['#id'] == 'edit-actions-save-edit') {
    $query_string = array();
    if (isset($_REQUEST['destination'])) {
      $query_string['destination'] = $_REQUEST['destination'];
    }
    // If the content lock module is installed do things with the lock token.
    if (module_exists('content_lock')) {
      if (isset($_REQUEST['content_lock_token'])) {
        $query_string['content_lock_token'] = $_REQUEST['content_lock_token'];
      }
      else {
        $query_string['content_lock_token'] = backdrop_get_token('node/' . $form_state['nid'] . '/edit');
      }
    }

    if (count($query_string) > 0) {
      $form_state['redirect'] = url('node/' . $form_state['nid'] . '/edit',
        array(
          'query' => $query_string,
          'absolute' => TRUE,
        )
      );
    }
    else {
      // Just go back to the form edit page, and dont worry about the redirect.
      $form_state['redirect'] = 'node/' . $form_state['nid'] . '/edit';
    }

    if (isset($_REQUEST['destination'])) {
      $_GET['destination'] = $form_state['redirect'];
      unset($_REQUEST['destination']);
    }
  }
}
