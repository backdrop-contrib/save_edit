<?php

/**
 * Save & Edit (http://drupal.org/project/save_edit)
 * Provides a button that gives users the option to 
 * Save a form they are working on, AND return to the
 * editing form in one step.
 * 
 * I find this quite usefull when entering a very long
 * blog post, and my thumb hovering dangerously close to
 * the mouse button that will take me "back" and lose all
 * my entered changes/data.
 * 
 * No Kittens were harmed during the creation of this module.
 */

/**
 * Provide online user help.
 *
 * @param $path
 * @param $arg
 * @return
 *   Help text
 */
function save_edit_help($path, $arg) {
  switch ($section) {
    case 'admin/help#save_edit':
      return '<p>'. t('Save & Edit adds a "Save and edit" button to the node add and block configure forms.') .'</p>';
    default:
      return '';
  }
}
/**
 * Implementation of hook_perm().
 */
function save_edit_perm() {
  return array('use save and edit', 'administer save and edit');
}
/**
 * Implementation of hook_menu().
 */
function save_edit_menu() {
  $items = array();
  $items['admin/settings/save-edit'] = array(
    'title' => t('Save & Edit Settings'),
    'description' => t('Administer settings related to the Save & Edit module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('save_edit_admin_settings'),
    'access arguments' => array('administer save and edit'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/*
 * Admin Settings form for Save & Edit
 */
function save_edit_admin_settings() {

  $form['save_edit_this_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Save & Edit General Features'),
    '#description' => t('General settings that will change the usage and/or appearance of the <a href="http://drupal.org/project/save_edit">Save & Edit</a> module.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  
  $form['save_edit_this_settings']['save_edit_button_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Text to use for Save & Edit button'),
    '#description' => t('This is the default text that will be used for the button at the bottom of the node form.<br />It would be best to use familiar terms like "<strong>Save & Edit</strong>" or "<strong>Apply</strong>" so that users can easily understand the feature/function related to this option.'),
    '#default_value' => variable_get('save_edit_button_value', 'Save & Edit'),
    '#required' => TRUE
  );
  $form['where_to_save_edit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Types'),
    '#description' => t('Set the node types you want to display links for.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['where_to_save_edit']['save_edit_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types'),
    '#default_value' => variable_get('save_edit_node_types', array()),
    '#options' => node_get_types('names')
  );
  return system_settings_form($form);
}
/**
 * Implementation of hook_form_alter().
 * @todo include various "basic" functions that modify the form
 * @todo include a "hide preview" button
 */
function save_edit_form_alter(&$form, $form_state, $form_id) {
	$node_types = variable_get('save_edit_node_types', array());
	$form_type = $form['type']['#value'];
  if ($form['#id'] == 'node-form' && $node_types[$form_type] && user_access('use save and edit')) {
    //add save and edit btn
    $form['buttons']['save_edit'] = array(
      '#type' => 'submit',
      '#value' => 'Save & Edit',
    );
    // declare default handler & then the custom one
    // for some reason without the default drupal node handler, it is 
    // completely ignoring the default/external submit handlers.
    // @todo read up on D6 submit handlers and how to simply append this 
    // handler to any handler(s) being called to the normal submit function
    $form['buttons']['save_edit']['#submit'] = array('redirect_save_edit_submit');
    //$form['#submit']['redirect_save_edit_submit'] = array();
  }
}
/**
 * Custom Submit Handler for Redirecting Save & Edit's to the node form after saving
 *
 * @param $form
 * @param $form_state
 */
function redirect_save_edit_submit($form, &$form_state) {
	// call default node save/submit function
  node_form_submit($form, $form_state);
  if ($form_state['nid']) {
  	// gonna play some tricks in case user was editing from admin/content/node
  	unset($_REQUEST['destination']);
    $form_state['redirect'] = 'node/'. $form_state['nid']. '/edit';
  }
}